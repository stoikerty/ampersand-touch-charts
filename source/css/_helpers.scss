// These are helper-mixins, -variables etc
// You will need compass & scss to use them.

// Let's import what we need often, from the compass framework.
// This selective choice speeds up the compilation time.
@import "compass/css3/box-sizing";
@import "compass/utilities/general/clearfix";
@import "compass/css3/border-radius";
@import "compass/css3/transition";
@import "compass/css3/box-shadow";
@import "compass/css3/images";
@import "compass/css3/opacity";
@import "compass/css3/text-shadow";
@import "compass/css3/user-interface";
@import "compass/css3/transform";
@import "compass/css3/filter";

// CSS Viewport rules
@mixin cssViewport{
// A new standard is being developed called @viewport.
// -> http://docs.webplatform.org/wiki/css/atrules/@viewport
// -> http://timkadlec.com/2012/10/ie10-snap-mode-and-responsive-design/

    @-ms-viewport { width : device-width; }
    @-o-viewport  { width : device-width; }
    @viewport     { width : device-width; }
}

// Reset helpers
@mixin resetElement{
    margin         : 0;
    padding        : 0;
    // no border reset
    font-size      : 100%;
    font           : inherit;
    vertical-align : baseline;
}
@mixin resetList($padding : 0){
    list-style : none;
    padding    : $padding;
}

@mixin resetImage{
  // Responsive images (ensure images don't scale beyond their parents)
  max-width : 100%;   // Part 1: Set a maxium relative to the parent
  width     : auto\9; // IE7-8 need help adjusting responsive images
  height    : auto;   // Part 2: Scale the height according to the width, otherwise you get stretching

  vertical-align: middle;
  border: 0;
  -ms-interpolation-mode: bicubic;
}

// reset for pseudo elements
@mixin pseudo($position: "absolute", $display: "block", $width: "", $height: "", $content: " "){
    @include resetElement;
    @include position($position, $display, $width, $height);
    content : $content;
}

// create a positioned Element, crossbrowser
@mixin position($position: relative, $display: block, $width: "", $height: ""){
    // set position
    position : $position;
    @if $display == inline-block {
        // Internet Explorer Hack to make inline-block work
        // useful "Star HTML Selector Bug" makes this possible
        // see: http://reference.sitepoint.com/css/workaroundsfilters
        display  : inline-block;
        *display : inline;
        zoom: 1;
    }
    @else { display : $display; }
    @if $width  != "" { width  : $width;  }
    @if $height != "" { height : $height; }
}

// mixin for less typing
@mixin border-box{
    @include box-sizing(border-box);
}

// quickly declare an element with fixed top position
@mixin position-sticky($position : top){
  // This is a new property, it's supported in newer browsers.
  // There is a polyfill available for this functionality.
  // https://github.com/filamentgroup/fixed-sticky
  position : -webkit-sticky;
  position : -moz-sticky;
  position : -ms-sticky;
  position : -o-sticky;
  position : sticky;
  @if $position == top    { top    : 0; }
  @if $position == bottom { bottom : 0; }
  @if $position == left   { left   : 0; }
  @if $position == right  { right  : 0; }
}

// Definition for animated elements
@mixin isAnimated{
  @include transform(translate3d(0,0,0));
  @include transform-origin(top, 0%);
  @include perspective(1000);
  @include backface-visibility(hidden);
}

// Definition for button elements
@mixin isButton{
  // change the cursor to a hand
  cursor          : pointer;
  // set text defaults
  text-decoration : none;
  vertical-align  : middle;
  // disable user selection and webkit highlight on tap
  @include user-select(none);
  -ms-user-select : none;
  -webkit-tap-highlight-color : transparent;

  // Fix for the Firefox padding issue on focus
  &::-moz-focus-inner{
    padding : 0 !important;
    margin  : -1px !important;
  }
}

// advanced mixin for creating multiple borders in one go
@mixin multipleBorders($top, $right:"empty", $bottom:"empty", $left:"empty"){
    @if $right == "empty" and $bottom == "empty" and $left == "empty" {
        border : $top;
    } @else {
        @if $right != "empty" and $bottom == "empty" and $left == "empty" {
            border-top    : $top;
            border-bottom : $top;
            border-right  : $right;
            border-left   : $right;
        }

        @if $right != "empty" and $bottom != "empty" and $left == "empty" {
            border-top    : $top;
            border-right  : $right;
            border-left   : $right;
            border-bottom : $bottom;
        }

        @if $right != "empty" and $bottom != "empty" and $left != "empty" {
            border-top    : $top;
            border-right  : $right;
            border-bottom : $bottom;
            border-left   : $left;
        }
    }
}

// Prototype mixins for debuggind elements
$proto-enabled : true;

// color an element
@mixin proto($nr: 1, $opacity : 1){
    $enabled : $proto-enabled;

    @if $enabled {
        @if     $nr == 0  { background-color : rgba($blue, 0.13); }
        @elseif $nr == 1  { background-color : rgba($blue-light, 0.5); }
        @elseif $nr == 2  { background-color : rgba($yellow-light, 0.9); }
        @elseif $nr == 3  { background-color : rgba($green-light, 0.5); }
        @elseif $nr == 4  { background-color : rgba($orange-light, 0.9); }
        @elseif $nr == 5  { background-color : rgba($red-light, 0.5); }
        @elseif $nr == 6  { background-color : rgba($blue-dark, 0.9); }
        @elseif $nr == 7  { background-color : rgba($yellow-light, 0.5); }
        @elseif $nr == 8  { background-color : rgba($green-dark, 0.9); }
        @elseif $nr == 9  { background-color : rgba($orange-light, 0.5); }
        @elseif $nr == 10 { background-color : rgba($red-dark, 0.9); }
        @else{
            //background-color : rgba($nr, 0.8);
            @include background-image(linear-gradient(left, rgba($nr, 1), rgba($nr, 0.4)));
        }
    }

    @include opacity($opacity);
}


// make also transparent for positioning
@mixin proto-transparent($nr: 4, $opacity : 0.7){
    $enabled : $proto-enabled;

    @include proto($nr, $opacity);

    >*{ @include opacity(0.7); }
}

@mixin proto-absolute($nr: 4, $opacity : 0.7){
    &:before{
        z-index: -1;
        @include position(absolute, block, 8px, 8px);
        @include fix(top, left);
        content : " ";
        background-color: $green;

        @include opacity($opacity);
    }
    &:after{
        z-index: +1;
        @include position(absolute, block, 4px, 4px);
        @include fix(top, left);
        content : " ";
        background-color: $orange;

        @include opacity($opacity);
    }
}

// create a simple floated element
@mixin element($float : left, $width : auto, $height : auto) {
    @include position(relative, block, $width, $height);
    float : $float;
}

// quickly fix an absolute-positioned element to a side/corner
@mixin fix($vertical:top, $horizontal:left){
    @if $vertical   == top    { top    : 0; }
    @if $vertical   == bottom { bottom : 0; }
    @if $horizontal == left   { left   : 0; }
    @if $horizontal == right  { right  : 0; }
}

// lock the text, so that it doesn't jump to the next line
@mixin lockText{
    white-space : nowrap;
    overflow    : hidden;
}

// make text fade out
@mixin fontFading($color:#fff){
    &:after{
        @include position(absolute, block, 20px, 100%);
        @include fix(top, right);
        content : ' ';
        @include background-image(linear-gradient(left, rgba($color, 0), rgba($color, 1) 95%));
    }
}

// create simple table elements
@mixin table($width:auto, $background-color:transparent, $border:none, $border-spacing:0px){
  display : table;
  width   : $width;
  border  : $border;

  border-spacing   : $border-spacing; // cellspacing : poor IE support for this
  background-color : $background-color;
}

@mixin table-row($width:auto, $background-color:transparent){
  display : table-row;
  clear   : both;
  width   : $width;

  background-color : $background-color;
}

@mixin table-col($width:auto, $background-color:transparent){
  float   : left; // fix for  buggy browsers
  display : table-column;
  width   : $width;

  background-color : $background-color;
}

//// Predefined Colors ////
$black-5  : darken(#fff, 5%);
$black-10 : darken(#fff, 10%);
$black-15 : darken(#fff, 15%);
$black-20 : darken(#fff, 20%);
$black-25 : darken(#fff, 25%);
$black-30 : darken(#fff, 30%);
$black-35 : darken(#fff, 35%);
$black-40 : darken(#fff, 40%);
$black-45 : darken(#fff, 45%);
$black-50 : darken(#fff, 50%);
$black-55 : darken(#fff, 55%);
$black-60 : darken(#fff, 60%);
$black-65 : darken(#fff, 65%);
$black-70 : darken(#fff, 70%);
$black-75 : darken(#fff, 75%);
$black-80 : darken(#fff, 80%);
$black-85 : darken(#fff, 85%);
$black-90 : darken(#fff, 90%);
$black-95 : darken(#fff, 95%);
$black    : darken(#fff, 100%);

$white-light : #f9f9f9;
$white       : #f4f4f4;
$white-dark  : #efefef;

$black-light : #4d4d4d;
$black       : #414141;
$black-dark  : #313131;

$blue-light : #268ce6;
$blue       : #1177db;
$blue-dark  : #0c68c3;

$dark_blue-light  : shade($blue-light, 16%);
$dark_blue        : shade($blue, 16%);
$dark_blue-dark   : shade($blue-dark, 16%);

$light_blue-light : #50b4dc;
$light_blue       : #3fa9d2;
$light_blue-dark  : #2b92b9;

$yellow-light : #fed829;
$yellow       : #fecf06;
$yellow-dark  : #eebd01;

$orange-light : #fd9b3e;
$orange       : #fc8c1f;
$orange-dark  : #ea7e0f;

$green-light  : #56c35d;
$green        : #40b547;
$green-dark   : #38a03e;

$red-light    : #e5584d;
$red          : #d83d30;
$red-dark     : #bc2d20;

$red_orange-light  : tint(mix($red-light, $orange-light, 26%), 2%);
$red_orange        : tint(mix($red, $orange, 26%), 2%);
$red_orange-dark   : tint(mix($red-dark, $orange-dark, 26%), 2%);

$pink-light : #fb6abe;
$pink       : #f254b1;
$pink-dark  : #d8479e;


// RWD - Responsive Web Design Additions
// --
// em's will be used instead of pixels
// http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/

// remove units from a number
@function stripUnits($number) {
  @return $number / ($number * 0 + 1);
}

// Convert pixels to em
@function toEm($px){
  $basepx : 16px;

  @return stripUnits($px)/stripUnits($basepx) + 0em;
}

// The breakpoints to use
// !default allows breakpoint to be set beforehand
// see: http://sass-lang.com/documentation/file.SASS_REFERENCE.html#variable_defaults_
$breakpoint-phone    : 220px !default;  // 240
$breakpoint-smart    : 300px !default;  // 320
$breakpoint-tablet7  : 460px !default;  // 480
$breakpoint-tablet10 : 750px !default;  // 768
$breakpoint-pcsmall  : 960px !default;  // 1024
$breakpoint-pclarge  : 1260px !default; // 1280

// convert to em's for better compatibility
$phone    : toEm($breakpoint-phone);
$smart    : toEm($breakpoint-smart);
$tablet7  : toEm($breakpoint-tablet7);
$tablet10 : toEm($breakpoint-tablet10);
$pcsmall  : toEm($breakpoint-pcsmall);
$pclarge  : toEm($breakpoint-pclarge);

// breakpoint functionality, smaller devices take priority (mobile-first)
@mixin breakpoint($media) {

  @for $i from 1 through length($media) {
    $device : nth($media, $i);

    // Display the css for the default device
    @if $device == "default" {
      @content;
    } @else {
      // Or display the css for each given device using media Breakbpoints

      @if ($device      == "phone") {
        @media (min-width: $phone) and (max-width: $smart)
        { @content; } }

      @else if ($device == "smart") {
        @media (min-width: $smart) and (max-width: $tablet7)
        { @content; } }

      @else if ($device == "tablet7") {
        @media (min-width: $tablet7) and (max-width: $tablet10)
        { @content; } }

      @else if ($device == "tablet10") {
        @media (min-width: $tablet10) and (max-width: $pcsmall)
        { @content; } }

      @else if ($device == "pcsmall") {
        @media (min-width: $pcsmall) and (max-width: $pclarge)
        { @content; } }

      @else if ($device == "pclarge") {
        @media (min-width: $pclarge)
        { @content; } }
    }
  }
}


// Misc Documentation
//
// - min-height doesn't work on tables
//   height is the equivalent
//   see: http://stackoverflow.com/questions/7790222/css-display-table-min-height-not-working
//
//


// -----------------------------------------------------------------
//   > @stoikerty https://github.com/stoikerty/stk-toolbox-helpers
